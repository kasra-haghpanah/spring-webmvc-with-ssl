-----------------------------------------------------------------------------------------------------
The correction test for server.p12
-----------------------------------------------------------------------------------------------------
 keytool -list ^
 -keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\server.p12" ^
 -storetype PKCS12 ^
 -storepass server123 ^
 -v
-----------------------------------------------------------------------------------------------------
The correction test for client.p12
-----------------------------------------------------------------------------------------------------
keytool -list ^
-keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\client.p12" ^
-storetype PKCS12 ^
-storepass client123 ^
-v
-----------------------------------------------------------------------------------------------------
The correction test for client-truststore.p12
-----------------------------------------------------------------------------------------------------
keytool -list ^
-keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\client-truststore.p12" ^
-storetype PKCS12 ^
-storepass trust123 ^
-v
-----------------------------------------------------------------------------------------------------

 🔐 ۱. server.p12 — Keystore سرور
 ✅ چی هست؟
 فایلی با فرمت PKCS12 که شامل:

 کلید خصوصی سرور (Private Key)

 گواهی عمومی سرور (Public Certificate)

 ✅ کاربرد:
 سرور از این کلید برای رمزنگاری ارتباطات استفاده می‌کنه.

 در Spring Boot معمولاً با server.ssl.key-store در application.properties تنظیم می‌شه.

 ✅ چرا مهمه؟
 بدون این فایل، سرور نمی‌تونه خودش رو به کلاینت معرفی کنه یا ارتباط امن برقرار کنه.

 📄 ۲. server.cer — گواهی عمومی سرور
 ✅ چی هست؟
 فایلی که فقط شامل گواهی عمومی سرور هست (بدون کلید خصوصی).

 ✅ کاربرد:
 برای ارسال به کلاینت تا بتونه به سرور اعتماد کنه.

 در truststore کلاینت import می‌شه.

 ✅ چرا مهمه؟
 کلاینت باید مطمئن باشه که داره با سرور واقعی ارتباط برقرار می‌کنه، نه با مهاجم.

 🔐 ۳. client.p12 — Keystore کلاینت
 ✅ چی هست؟
 فایلی با فرمت PKCS12 که شامل:

 کلید خصوصی کلاینت

 گواهی عمومی کلاینت

 ✅ کاربرد:
 برای احراز هویت کلاینت در سمت سرور.

 در Spring Boot یا RestTemplate با SSLContext تنظیم می‌شه.

 ✅ چرا مهمه؟
 در mTLS، سرور هم باید مطمئن باشه که کلاینت معتبره.

 📄 ۴. client.cer — گواهی عمومی کلاینت
 ✅ چی هست؟
 فایلی که فقط شامل گواهی عمومی کلاینت هست.

 ✅ کاربرد:
 برای ارسال به سرور تا بتونه به کلاینت اعتماد کنه.

 در truststore سرور import می‌شه (اگر بخوای سرور هم کلاینت رو اعتبارسنجی کنه).

 ✅ چرا مهمه؟
 برای ساخت اعتماد دوطرفه، سرور باید گواهی کلاینت رو بشناسه.

 🛡️ ۵. client-truststore.p12 — Truststore کلاینت
 ✅ چی هست؟
 فایلی با فرمت PKCS12 که شامل گواهی عمومی سرور (server.cer) هست.

 ✅ کاربرد:
 کلاینت از این فایل برای اعتماد به سرور استفاده می‌کنه.

 در Spring Boot با server.ssl.trust-store تنظیم می‌شه.

 ✅ چرا مهمه؟
 اگر سرور از گواهی غیرعمومی یا self-signed استفاده کنه، کلاینت باید اون رو بشناسه تا ارتباط برقرار کنه.




فایل	     مالک	شامل	کاربرد
server.p12	سرور	کلید خصوصی + گواهی عمومی	رمزنگاری و معرفی سرور
server.cer	سرور	گواهی عمومی	ارسال به کلاینت برای اعتماد
client.p12	کلاینت	کلید خصوصی + گواهی عمومی	احراز هویت کلاینت
client.cer	کلاینت	گواهی عمومی	ارسال به سرور برای اعتماد
client-truststore.p12	کلاینت	گواهی عمومی سرور	اعتماد به سرور





-----------------------------------------------------------------------------------------------------
 for server: دستور کامل برای ساخت keystore با فرمت PKCS12
-----------------------------------------------------------------------------------------------------
keytool -genkeypair ^
-alias serverAlias ^
-keyalg RSA ^
-keysize 2048 ^
-keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\server.p12" ^
-storetype PKCS12 ^
-storepass server123 ^
-keypass server123 ^
-validity 3650 ^
-dname "CN=localhost, OU=Backend, O=Kasra Inc, L=Tehran, ST=Tehran, C=IR"
-----------------------------------------------------------------------------------------------------

-alias serverAlias: نام کلید داخل keystore
-keyalg RSA: الگوریتم کلید (RSA امن و رایج هست)
-keysize 2048: اندازه کلید (برای امنیت مناسب)
-keystore sample.p12: نام فایل keystore خروجی
-storetype PKCS12: فرمت استاندارد keystore
-storepass: پسورد keystore و کلید خصوصی
-keypass: پسورد keystore و کلید خصوصی
-validity 3650: اعتبار گواهی به روز (اینجا ۱۰ سال)
-dname: 	اطلاعات گواهی (CN, OU, O, ...)
-----------------------------------------------------------------------------------------------------
  correction test:
-----------------------------------------------------------------------------------------------------
keytool -list -keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\server.p12" -storepass server123
-----------------------------------------------------------------------------------------------------
 export server.cer
-----------------------------------------------------------------------------------------------------
keytool -export ^
 -alias serverAlias ^
 -keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\server.p12" ^
 -storetype PKCS12 ^
 -storepass server123 ^
 -file "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\server.cer"
-----------------------------------------------------------------------------------------------------


for client: دستور کامل برای ساخت keystore با فرمت PKCS12

-----------------------------------------------------------------------------------------------------
 1. ساخت keystore کلاینت با فرمت PKCS12
-----------------------------------------------------------------------------------------------------
keytool -genkeypair ^
-alias clientAlias ^
-keyalg RSA ^
-keysize 2048 ^
-keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\client.p12" ^
-storetype PKCS12 ^
-storepass client123 ^
-keypass client123 ^
-validity 3650 ^
-dname "CN=client, OU=Backend, O=Kasra Inc, L=Tehran, ST=Tehran, C=IR"
-----------------------------------------------------------------------------------------------------
 2. استخراج گواهی عمومی کلاینت
-----------------------------------------------------------------------------------------------------
keytool -export ^
-alias clientAlias ^
-keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\client.p12" ^
-storetype PKCS12 ^
-storepass client123 ^
-file "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\client.cer"
-----------------------------------------------------------------------------------------------------
3. ساخت truststore کلاینت با فرمت PKCS12 (برای اعتماد به سرور)
 -----------------------------------------------------------------------------------------------------
 keytool -import ^
  -alias serverAlias ^
  -file "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\server.cer" ^
  -keystore "C:\\Users\\98911\\Desktop\\Technical-inistitue-of-Tehran\\project\\spring\\src\\main\\resources\\p12\\client-truststore.p12" ^
  -storetype PKCS12 ^
  -storepass trust123 ^
  -noprompt
 -----------------------------------------------------------------------------------------------------
